 	// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
	id			Int			@id
	createdAt	DateTime	@default(now())
	email		String		@unique
	password	String?
	username	String 		@unique
	level		Int?
	xp			Int?
	status		USER_STATUS	@default(OFFLINE)
	game1		Game[] @relation("player1")
	game2		Game[] @relation("player2")
	gameplayed	Int?
	scoreMiniGame	Int?
	pictureURL	String?
	enabled2FA	Boolean?
	totpKey		String?
	log2FA		Boolean?
	loginLoc	Boolean?
	ELO			Int?

	friends		User[] @relation ("Friends")
	friendsOf	User[] @relation ("Friends")

	InvitFriendSent		Friendship[]			@relation("SentFriendships")
	InvitFriendReceived	Friendship[]			@relation("ReceivedFriendships")

	sentInvitations		ChatroomInvitations[]	@relation("SentInvitations")
	receivedInvitations	ChatroomInvitations[]	@relation("ReceidedInvitations")

	// achievements		UserAchievement[]
	// @@map("users")

	block		User[] @relation ("Block")
	blockOf		User[] @relation ("Block")

	PrivMessEmited       privateMessage[] @relation(name: "sender")
  	PrivMessReceived     privateMessage[] @relation(name: "recipient")

	userOnChanel		UserOnChannel[]
	RoomMessSent		ChatroomMessage[]
	

}

model Friendship {
	id				Int						@id @default(autoincrement())
	status			FriendsInvitationStatus	@default(PENDING)
	sender			User					@relation("SentFriendships", fields: [senderId], references: [id])
	senderId		Int
	recipient		User					@relation("ReceivedFriendships", fields: [recipientId], references: [id])
	recipientId		Int
	@@unique([senderId, recipientId])
}

enum FriendsInvitationStatus {
	ACCEPTED
	PENDING
	REFUSED
}
// model Achievement {
// 	id			Int			@id @default(autoincrement())
// 	name		String		@unique
// 	description	String
// 	createdAt	DateTime	@default(now())

// 	users		UserAchievement[]
// 	@@map("achievements")

// }

// model UserAchievement {
// 	id				Int			@id @default(autoincrement())
// 	userId			Int
// 	achievementId	Int
// 	createdAt		DateTime	@default(now())
	
// 	user			User		@relation(fields: [userId], references: [id])
// 	achievement		Achievement?	@relation(fields: [achievementId], references: [id])
// 	@@unique([userId, achievementId])
// }


enum USER_STATUS{
	INGAME
	OFFLINE
	ONLINE
}



model Game {
	id			Int			@id @default(autoincrement())
	start_at	DateTime	@default(now())
	end_at		DateTime
  	userId1		Int
	player1		User @relation("player1", fields: [userId1], references: [id])
  	userId2		Int
	player2		User @relation("player2", fields: [userId2], references: [id])
	winnerId	Int?
	scrP1		Int?
	scrP2		Int?
	roomId		Int?
	superGame	Int?
	username1	String?
	username2	String?
}

model privateMessage {
	id			Int			@id @default(autoincrement())
	start_at	DateTime	@default(now())
	content		String?
  	senderId    Int
	sender		User @relation("sender", fields: [senderId], references: [id])
  	recipientId Int
	recipient	User @relation("recipient", fields: [recipientId], references: [id])
}

model Chatroom {
	id				Int						@id @default(autoincrement())
	visibility		UserChannelVisibility	@default(PUBLIC)
	name			String
	users	UserOnChannel[]
	hash			String?
	roomMess		ChatroomMessage[]
	invitations		ChatroomInvitations[]

}

model ChatroomMessage {
  id				Int     @id @default(autoincrement())
  start_at			DateTime  @default(now())
  content			String?
  chatroomId		Int
  chatroom			Chatroom @relation(fields: [chatroomId], references: [id])
  senderId			Int
  sender			User    @relation(fields: [senderId], references: [id])
}

model ChatroomInvitations {
	id			Int					@id @default(autoincrement())
	status		InvitationsStatus	@default(PENDING)
	chatroomId	Int
	chatroom	Chatroom			@relation(fields: [chatroomId], references: [id])
	senderId	Int
	sender		User				@relation(name: "SentInvitations", fields: [senderId], references: [id])
	receiverId	Int
	receiver	User				@relation(name: "ReceidedInvitations", fields: [receiverId], references: [id])
	createdAt	DateTime			@default(now())
	@@unique([chatroomId, senderId, receiverId])
}

model UserOnChannel {
	id			Int					@id @default(autoincrement())
	role		UserRoleInChannel	@default(USER)
	status		UserStatusOnChannel	@default(CLEAN)
	userId		Int
	user		User				@relation(fields: [userId], references: [id])
	channelId	Int
	channel		Chatroom			@relation(fields: [channelId], references: [id])
	bannedUntil	DateTime?
	mutedUntil	DateTime?			@db.Timestamptz(1)

	@@unique([channelId, userId])
}

enum UserChannelVisibility {
	PUBLIC
	PRIVATE
	PWD_PROTECTED
}

enum UserRoleInChannel {
	USER
	ADMIN
	OWNER
}

enum UserStatusOnChannel {
	CLEAN
	MUTE
	BAN
}

enum InvitationsStatus {
	PENDING
	ACCEPTED
	REJECTED
}